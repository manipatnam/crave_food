import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../providers/favourites_provider.dart';
import '../services/google_places_services.dart';
import '../models/place_model.dart';
import '../models/favourite_model.dart';
import '../widgets/custom_text_field.dart';
import '../widgets/custom_button.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class AddFavouriteScreen extends StatefulWidget {
  const AddFavouriteScreen({super.key});

  @override
  State<AddFavouriteScreen> createState() => _AddFavouriteScreenState();
}

class _AddFavouriteScreenState extends State<AddFavouriteScreen> {
  final _formKey = GlobalKey<FormState>();
  final _restaurantController = TextEditingController();
  final _foodController = TextEditingController();
  final _socialController = TextEditingController();
  final _notesController = TextEditingController();
  
  final GooglePlacesService _placesService = GooglePlacesService();
  
  List<PlaceModel> _searchResults = [];
  PlaceModel? _selectedPlace;
  List<String> _foodItems = [];
  List<String> _socialUrls = [];
  bool _isSearching = false;
  bool _isAdding = false;

  @override
  void dispose() {
    _restaurantController.dispose();
    _foodController.dispose();
    _socialController.dispose();
    _notesController.dispose();
    super.dispose();
  }

  Future<void> _searchRestaurants(String query) async {
    if (query.length < 2) {
      setState(() {
        _searchResults = [];
      });
      return;
    }

    setState(() {
      _isSearching = true;
    });

    try {
      final results = await _placesService.searchPlaces(query);
      if (mounted) {
        setState(() {
          _searchResults = results;
          _isSearching = false;
        });
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          _isSearching = false;
        });
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error searching: $e')),
        );
      }
    }
  }

  void _selectPlace(PlaceModel place) {
    setState(() {
      _selectedPlace = place;
      _restaurantController.text = place.name;
      _searchResults = [];
    });
  }

  void _addFoodItem() {
    if (_foodController.text.isNotEmpty) {
      setState(() {
        _foodItems.add(_foodController.text.trim());
        _foodController.clear();
      });
    }
  }

  void _removeFoodItem(int index) {
    setState(() {
      _foodItems.removeAt(index);
    });
  }

  void _addSocialUrl() {
    final url = _socialController.text.trim();
    if (url.isNotEmpty && _isValidUrl(url)) {
      setState(() {
        _socialUrls.add(url);
        _socialController.clear();
      });
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please enter a valid URL')),
      );
    }
  }

  void _removeSocialUrl(int index) {
    setState(() {
      _socialUrls.removeAt(index);
    });
  }

  bool _isValidUrl(String url) {
    try {
      final uri = Uri.parse(url);
      return uri.hasScheme && (uri.scheme == 'http' || uri.scheme == 'https');
    } catch (e) {
      return false;
    }
  }

  Future<void> _saveFavourite() async {
    if (!_formKey.currentState!.validate()) return;
    
    if (_selectedPlace == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please select a restaurant')),
      );
      return;
    }

    setState(() {
      _isAdding = true;
    });

    try {
      final favourite = Favourite(
        id: '', // Will be generated by Firestore
        restaurantName: _selectedPlace!.name,
        googlePlaceId: _selectedPlace!.placeId,
        coordinates: _selectedPlace!.geoPoint,
        foodNames: _foodItems,
        socialUrls: _socialUrls,
        dateAdded: DateTime.now(),
        userId: '', // Will be set by the service
        userNotes: _notesController.text.isNotEmpty ? _notesController.text : null,
      );

      final success = await Provider.of<FavouritesProvider>(context, listen: false)
          .addFavourite(favourite);

      if (mounted) {
        setState(() {
          _isAdding = false;
        });

        if (success) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('Favourite added successfully!'),
              backgroundColor: Colors.green,
            ),
          );
          // Return with success flag to refresh the favourites list
          Navigator.pop(context, true);
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('Failed to add favourite. Please try again.'),
              backgroundColor: Colors.red,
            ),
          );
        }
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          _isAdding = false;
        });
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[50],
      appBar: AppBar(
        title: const Text(
          'Add Favourite',
          style: TextStyle(fontWeight: FontWeight.bold),
        ),
        backgroundColor: Colors.white,
        foregroundColor: Colors.black87,
        elevation: 0,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(20),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Restaurant Search Section
              const Text(
                'Restaurant',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Colors.black87,
                ),
              ),
              const SizedBox(height: 12),
              
              CustomTextField(
                controller: _restaurantController,
                hintText: 'Search for a restaurant...',
                prefixIcon: Icons.search,
                onChanged: _searchRestaurants,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please select a restaurant';
                  }
                  return null;
                },
              ),
              
              // Search Results
              if (_isSearching)
                const Padding(
                  padding: EdgeInsets.all(16),
                  child: Center(child: CircularProgressIndicator()),
                )
              else if (_searchResults.isNotEmpty)
                Container(
                  margin: const EdgeInsets.only(top: 8),
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(12),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.grey.withOpacity(0.1),
                        spreadRadius: 1,
                        blurRadius: 5,
                        offset: const Offset(0, 2),
                      ),
                    ],
                  ),
                  child: ListView.builder(
                    shrinkWrap: true,
                    physics: const NeverScrollableScrollPhysics(),
                    itemCount: _searchResults.length,
                    itemBuilder: (context, index) {
                      final place = _searchResults[index];
                      return ListTile(
                        leading: Icon(
                          Icons.location_on,
                          color: Theme.of(context).primaryColor,
                        ),
                        title: Text(place.name),
                        subtitle: Text(
                          place.displayAddress,
                          maxLines: 1,
                          overflow: TextOverflow.ellipsis,
                        ),
                        trailing: place.rating != null
                            ? Row(
                                mainAxisSize: MainAxisSize.min,
                                children: [
                                  const Icon(Icons.star, color: Colors.amber, size: 16),
                                  Text(place.rating!.toStringAsFixed(1)),
                                ],
                              )
                            : null,
                        onTap: () => _selectPlace(place),
                      );
                    },
                  ),
                ),
              
              const SizedBox(height: 24),
              
              // Food Items Section
              const Text(
                'Food Items',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Colors.black87,
                ),
              ),
              const SizedBox(height: 12),
              
              Row(
                children: [
                  Expanded(
                    child: CustomTextField(
                      controller: _foodController,
                      hintText: 'Add a food item...',
                      prefixIcon: Icons.restaurant,
                      textCapitalization: TextCapitalization.words,
                    ),
                  ),
                  const SizedBox(width: 12),
                  IconButton(
                    onPressed: _addFoodItem,
                    icon: Icon(
                      Icons.add_circle,
                      color: Theme.of(context).primaryColor,
                      size: 32,
                    ),
                  ),
                ],
              ),
              
              // Food Items List
              if (_foodItems.isNotEmpty) ...[
                const SizedBox(height: 12),
                Wrap(
                  spacing: 8,
                  runSpacing: 8,
                  children: _foodItems.asMap().entries.map((entry) {
                    final index = entry.key;
                    final item = entry.value;
                    return Chip(
                      label: Text(item),
                      deleteIcon: const Icon(Icons.close, size: 18),
                      onDeleted: () => _removeFoodItem(index),
                      backgroundColor: Theme.of(context).primaryColor.withOpacity(0.1),
                    );
                  }).toList(),
                ),
              ],
              
              const SizedBox(height: 24),
              
              // Social URLs Section
              const Text(
                'Social Media Links (Optional)',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Colors.black87,
                ),
              ),
              const SizedBox(height: 12),
              
              Row(
                children: [
                  Expanded(
                    child: CustomTextField(
                      controller: _socialController,
                      hintText: 'https://instagram.com/restaurant...',
                      prefixIcon: Icons.link,
                      keyboardType: TextInputType.url,
                    ),
                  ),
                  const SizedBox(width: 12),
                  IconButton(
                    onPressed: _addSocialUrl,
                    icon: Icon(
                      Icons.add_circle,
                      color: Theme.of(context).primaryColor,
                      size: 32,
                    ),
                  ),
                ],
              ),
              
              // Social URLs List
              if (_socialUrls.isNotEmpty) ...[
                const SizedBox(height: 12),
                Column(
                  children: _socialUrls.asMap().entries.map((entry) {
                    final index = entry.key;
                    final url = entry.value;
                    IconData iconData = Icons.link;
                    Color iconColor = Colors.blue;
                    
                    if (url.contains('instagram')) {
                      iconData = Icons.camera_alt;
                      iconColor = Colors.purple;
                    } else if (url.contains('youtube')) {
                      iconData = Icons.play_circle;
                      iconColor = Colors.red;
                    }
                    
                    return Container(
                      margin: const EdgeInsets.only(bottom: 8),
                      padding: const EdgeInsets.all(12),
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(8),
                        border: Border.all(color: Colors.grey[300]!),
                      ),
                      child: Row(
                        children: [
                          Icon(iconData, color: iconColor, size: 20),
                          const SizedBox(width: 12),
                          Expanded(
                            child: Text(
                              url,
                              style: const TextStyle(fontSize: 14),
                              overflow: TextOverflow.ellipsis,
                            ),
                          ),
                          IconButton(
                            onPressed: () => _removeSocialUrl(index),
                            icon: const Icon(Icons.delete, color: Colors.red),
                            iconSize: 20,
                          ),
                        ],
                      ),
                    );
                  }).toList(),
                ),
              ],
              
              const SizedBox(height: 24),
              
              // Notes Section
              const Text(
                'Notes (Optional)',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Colors.black87,
                ),
              ),
              const SizedBox(height: 12),
              
              CustomTextField(
                controller: _notesController,
                hintText: 'Add any notes about this restaurant...',
                prefixIcon: Icons.note,
                maxLines: 3,
                textCapitalization: TextCapitalization.sentences,
              ),
              
              const SizedBox(height: 32),
              
              // Save Button
              CustomButton(
                text: 'Add to Favourites',
                onPressed: _saveFavourite,
                isLoading: _isAdding,
                icon: Icons.favorite,
              ),
            ],
          ),
        ),
      ),
    );
  }
}